// Comprehensive Orus vs Lua Benchmark
print("=== Orus Performance Benchmark ===")

// Test 1: LICM optimization showcase (loop invariant code motion)
print("Test 1: LICM optimization")
a = 17
b = 23
c = 31
d = 37

mut licm_result = 0i64
for i in 0..150000:
    inv1 = a * b + c
    inv2 = d * a - b
    expr = inv1 + inv2
    licm_result = licm_result + expr + i

print("LICM result:", licm_result)

// Test 2: Nested loops with intensive computation
print("Test 2: Nested loops")
mut nested_sum = 0i64
for outer in 0..200:
    for inner in 0..200:
        calc = outer * inner + 13
        nested_sum = nested_sum + calc

print("Nested result:", nested_sum)

// Test 3: Large range with stepping
print("Test 3: Large range stepping")
mut step_result = 0i64
for i in 0..20000000..5000:
    step_result = step_result + i

print("Step result:", step_result)

// Test 4: Mixed arithmetic operations
print("Test 4: Mixed arithmetic")
mut mixed_result = 0.0
base = 3.14159
factor = 2.71828

for i in 0..120000:
    calc = base * factor
    mixed_result = mixed_result + calc + i

print("Mixed result:", mixed_result)

// Test 5: Complex mathematical operations
print("Test 5: Mathematical operations")
mut math_result = 0i64
for i in 0..100000:
    temp = i * 3 + 7
    result = temp * temp - i
    math_result = math_result + result

print("Math result:", math_result)

print("=== Benchmark Complete ===")